(define-pattern (time . ?exps)
	(let
		((start (System/currentTimeMillis)))
			(let
				((result (begin @?exps)))
					(let ((end (System/currentTimeMillis)))
						(newline) (display (- end start)) (display " ms") (newline)
						result))))
						
(define-macro (amb . ?exps)
	`(amb-thunks ,@(map (lambda (x) (list 'lambda '() x)) '?exps)))
			
(define-pattern (amb-list ?exp)
	(amb-list-thunk (lambda () ?exp)))
	
(define (require p)
	(if (not p) (amb)))
	
(define (iter-amb iter has-next)
  (require has-next)
  (amb (.next iter) (iter-amb iter (.hasNext iter))))
	
(define (an-element-of l)
  (let ((iter (.iterator l)))
    (iter-amb iter (.hasNext iter))))
    
(define (an-atom-of l)
  (if (iterable? l)
      (an-atom-of (an-element-of l))
      l))
    	
(define-pattern (exists? . ?exp)
	(exists-thunk? (lambda () @?exp)))
	
;(define (keep-all pred l)
;  (let ((e (an-element-of l)))
;    (require (pred e))
;    e))
    
;(define (remove-all pred l)
;  (keep-all (lambda (x) (not (pred x))) l))    
    