(begin
  (define (Sort V Low High Recurse)
    (define Left Low)
    (define Right High)
    (define Pivot (vector-ref V (quotient (+ Left Right) 2)))
    (define Save 0)
    (while (< Left Right)
           (while (< (vector-ref V Left) Pivot)
                  (set! Left (+ Left 1)))
           (while (> (vector-ref V Right) Pivot)
                  (set! Right (- Right 1)))
           (if (<= Left Right)
               (begin
                 (set! Save (vector-ref V Left))
                 (vector-set! V Left (vector-ref V Right))
                 (vector-set! V Right Save)
                 (set! Left (+ Left 1))
                 (set! Right (- Right 1)))))
    (Recurse Left Right))

  (define (SingleCore-QuickSort V Low High)
    (define (SingleCore-Recurse Left Right)
      (if (< Low Right)
          (SingleCore-QuickSort V Low Right))
      (if (> High Left)
          (SingleCore-QuickSort V Left High)))
    (Sort V Low High SingleCore-Recurse))

  (define (MultiCore-QuickSort Depth V Low High)
    (define (MultiCore-Recurse Left Right)
      (if (> Depth 0)
          (begin
            (define future
              (if (< Low Right)
                  (future (MultiCore-QuickSort (- Depth 1) V Low Right))))
            (if (> High Left)
                (MultiCore-QuickSort (- Depth 1) V Left High))
              (touch future))
          (SingleCore-QuickSort V Low High)))
    (Sort V Low High MultiCore-Recurse))

  (define size 100000)
  (define V (make-vector size 0))
  (define Low 0)
  (define High (- (vector-length V) 1))
  (define depth 0)
  (define threads 1)
  (display "multicore quicksort of ")
  (display size)
  (display " integers")
  (newline)
  (while (< depth 8)
         (display "number of threads = ")
         (display threads)
         (define x 0)
         (define y 1)
         (while (<= x High)
                (vector-set! V x y)
                (set! x (+ x 1))
                (set! y (remainder (+ y 4253171) 1235711)))
         (time (MultiCore-QuickSort depth V Low High))
         (set! depth (+ depth 1))
         (set! threads (* threads 2))
         (newline)))
