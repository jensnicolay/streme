(define (filter pred l)
	(if (null? l)
		'()
		(let ((x (car l)))
			(if (pred x)
				(cons x (filter pred (cdr l)))
				(filter pred (cdr l))))))
		
				
(define (fold kons knil lis1)
  (let lp ((lis lis1) (ans knil))			; Fast path
	(if (null-list? lis) ans
	    (lp (cdr lis) (kons (car lis) ans)))))


(define (fold-right kons knil lis1)
  (let recur ((lis lis1))				; Fast path
	(if (null-list? lis) knil
	    (let ((head (car lis)))
	      (kons head (recur (cdr lis)))))))