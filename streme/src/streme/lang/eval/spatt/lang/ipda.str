
(define *any* (Object.))
			
(define (create-time)
	'())
	
(define (time-tick value k time)
	(let ((result (append time (list value))))
		(if (> (length result) k)
			(cdr result)
			result))) 
	   
(define (create-var-address var time)
	(vector 'var var time))
	
(define (var-address? object)
	(and (vector? object) (eq? 'var (vector-ref object 0))))
	
(define (var-address-var avar)
	(vector-ref avar 1))
	
(define (var-address-time avar)
	(vector-ref avar 2))
	
(define (values-union values1 values2)
	(if (or (eq? values1 *any*) (eq? values2 *any*))
		*any*
		(let ((union (lset-union values1 values2)))
			(if (> (length union) 4)
				*any*
				union))))
	
(define (%create-aval values fresh mono)
	(vector values fresh mono))
	
(define (create-aval values)
	(%create-aval values #t values))
	
(define (aval-values aval)
	(vector-ref aval 0))
	
(define (aval-fresh? aval)
	(vector-ref aval 1))
	
(define (aval-mono aval)
	(vector-ref aval 2))
	
(define (aval-update values aval)
	(if (aval-fresh? aval)
		(aval-strong-update values aval)
		(aval-weak-update values aval)))
		
(define (aval-weak-update values aval)
	(%create-aval (values-union values (aval-values aval)) #f (values-union values (aval-mono aval))))					
	
(define (aval-strong-update values aval)
	(%create-aval values (aval-fresh? aval) (values-union values (aval-mono aval))))
	   	   
(define (aval-reset aval)
	(%create-aval '() #t (aval-mono aval)))	   	   
	   	   
(define (create-store)
	'())
	
(define (store-lookup-entry address store)
	(assoc address store))

(define (store-update address value store)
	(if (null? store)
		(cons (cons address value) '())
		(let ((entry (car store)))
			  (if (equal? (car entry) address)
			  	(cons (cons address value) (cdr store))
				(cons entry (store-update address value (cdr store)))))))

(define (store-lookup-aval address store)
	(let ((entry (store-lookup-entry address store)))
		(if entry
			(aval-values (cdr entry))
			(error (String/format "no aval to lookup at address %1s" (vector address))))))
	
(define (store-alloc-aval address values store)
	(let ((entry (store-lookup-entry address store)))
		(if entry
			(store-update address (aval-weak-update values (cdr entry)) store)
			(store-update address (create-aval values) store))))
			
(define (store-update-aval address values store)
	(let ((entry (store-lookup-entry address store)))
		(if entry
			(store-update address (aval-update values (cdr entry)) store)
			(error (String/format "no aval to update at address %1s" (vector address))))))

(define (benv-add name address benv)
  (let ((frame (car benv)))
    (set-car! benv (cons (cons name address) frame))))

(define (benv-allocate-frame benv)
  (cons '() benv))

(define (benv-lookup name benv)
  	(if (null? benv)
		(error (String/format "no address for name %1s" (vector name)))
      	(let ((frame (car benv)))
        	(let ((entry (assoc name frame)))
          		(if entry
              		(cdr entry)
              		(benv-lookup name (cdr benv)))))))
	
(define (benv-addresses benv)
	(map cdr (apply append benv)))

(define (%create-cont benv proc applications)
	(vector 'cont benv proc applications))
	
(define (cont? value)
	(and (vector? value) (eq? 'cont (vector-ref value 0))))
	
(define (cont-benv cont)
	(vector-ref cont 1))
	
(define (cont-proc cont)
	(vector-ref cont 2))
	
(define (cont-applications cont)
	(vector-ref cont 3))
	
(define (create-cont benv proc)
	(%create-cont benv proc '()))
	
(define (cont-call cont stack time)
	((cont-proc cont) stack time))
	
(define (cont-add-application application cont)
	(%create-cont (cont-benv cont) (cont-proc cont) (cons application (cont-applications cont))))	
	
(define (stack-applications stack)
	(if (null? stack)
		'()
		(let ((value (car stack)))
			(if (cont? value)
				(append (cont-applications value) (stack-applications (cdr stack)))
				(stack-applications (cdr stack))))))
	
(define (create-task stack benv proc)
	(vector stack benv proc))
	
(define (task-stack task)
	(vector-ref task 0))

(define (task-benv task)
	(vector-ref task 1))

(define (task-proc task)
	(vector-ref task 2))

(define (task-call task)
	((task-proc task)))
	
(define (create-closure lam benv)
	(vector 'closure lam benv))
	
(define (closure? object)
	(and (vector? object) (eq? (vector-ref object 0) 'closure)))

(define (closure-lambda closure)
	(vector-ref closure 1))
	
(define (closure-benv closure)
	(vector-ref closure 2))
		
(define (create-calling-context operator operands time)
	(vector operator operands time))
	
(define (create-ipda result reads writes store)
	(vector result reads writes store))
	
(define (ipda-result ipda)
	(vector-ref ipda 0))

(define (ipda-reads ipda)
	(vector-ref ipda 1))

(define (ipda-writes ipda)
	(vector-ref ipda 2))
	
(define (ipda-store ipda)
	(vector-ref ipda 3))
	
(define (benv-reachable benv reachable store)
	(frame-reachable (benv-addresses benv) reachable store))
	
(define (cont-reachable cont reachable store)
	(benv-reachable (cont-benv cont) reachable store))
	
(define (closure-reachable closure reachable store)
	(benv-reachable (closure-benv closure) reachable store))

(define (value-reachable value reachable store)
   	(cond ((eq? value *any*)
 		   reachable)
   	      ((closure? value)
   		   (closure-reachable value reachable store))
   		  ((cont? value)
   		   (cont-reachable value reachable store))
   		  ((pair? value)
   		   (values-reachable value reachable store))
   		  (else reachable)))
	
(define (values-reachable values reachable store)
	(if (pair? values)
		(value-reachable (car values) (value-reachable (cdr values) reachable store) store)
		reachable))		
			
(define (address-reachable address reachable store)
  (cond ((lset-member? address reachable)
         reachable)
  		((var-address? address)
		 (let ((values (store-lookup-aval address store)))
		 	(values-reachable values (cons address reachable) store)))
	    (else
	      (error (String/format "cannot handle address %1s" (vector address))))))	
	
(define (frame-reachable addresses reachable store)
	(if (null? addresses)
		reachable
		(frame-reachable (cdr addresses) (address-reachable (car addresses) reachable store) store)))
		
(define (tasks-reachable tasks reachable store)
	(if (null? tasks)
		reachable
		(let ((task (car tasks)))
			(tasks-reachable (cdr tasks) (benv-reachable (task-benv task) (values-reachable (task-stack task) reachable store) store) store))))
	
(define (store-gc stack benv tasks store)
	(let ((reachable (tasks-reachable tasks (benv-reachable benv (values-reachable stack '() store) store) store)))
		(let loop ((todo store)
		           (result '()))
			(if (null? todo)
				result
				(let* ((entry (car todo))
				       (address (car entry)))
					(if (member address reachable)
						(loop (cdr todo) (cons entry result))
						(if (var-address? address)
							(loop (cdr todo) (cons (cons address (aval-reset (cdr entry))) result))
							(loop (cdr todo) result))))))))

(define (ipda-eval node k ast)

	(define calling-contexts (create-lsetmap))
	(define store (create-store))
	(define result '())
	(define reads (create-lsetmap))
	(define writes (create-lsetmap))
	(define tasks #f)

	(define (eval-literal node stack benv time)
		(let ((cont (car stack))
		      (stack2 (cdr stack)))
			(cont-call cont (cons (create-lset (literal-value node)) stack2) time)))
			
	(define (define-cont var benv)
		(create-cont
		    benv
			(lambda (stack time)
				(let ((values (car stack))
				      (cont (cadr stack))
				      (stack2 (cddr stack))
				      (address (create-var-address var time)))
					(benv-add (var-name var) address benv)
					(set! store (store-alloc-aval address values store)) 
				    (cont-call cont (cons (create-lset *unspecified*) stack2) time)))))
						
	(define (eval-define node stack benv time)
    	(eval-node (define-value node) (cons (define-cont (define-var node) benv) stack) benv time))
    	
	(define (set-cont var benv)
		(create-cont
			benv
			(lambda (stack time)
				(let ((values (car stack))
				      (cont (cadr stack))
				      (stack2 (cddr stack))
				      (address (benv-lookup (var-name var) benv)))
	            	(set! store (store-update-aval address values store))
	                (for-each (lambda (application)
	                			 (set! writes (lsetmap-put application address writes)))
	                          (stack-applications stack))
	                (cont-call cont (cons (create-lset *unspecified*) stack2) time)))))

	(define (eval-set node stack benv time)
		(let ((var (lookup-set-var node ast)))
   			(if var
    			(eval-node (set-value node) (cons (set-cont var benv) stack) benv time)
				(error (String/format "no var for %1s" (vector node))))))
						                         
	(define (eval-ref node stack benv time)
		(let ((cont (car stack))
			  (stack2 (cdr stack))
		      (var (lookup-ref-var node ast)))
	       	(if var
	       		(let ((address (benv-lookup (var-name var) benv)))
	       			(for-each (lambda (application)
	       							(set! reads (lsetmap-put application address reads)))
	       					  (stack-applications stack))
	       			(cont-call cont (cons (store-lookup-aval address store) stack2) time))
	       	    (cont-call cont (cons (create-lset (eval (ref-name node))) stack2) time))))
	       	    
	(define (eval-lambda node stack benv time)
		(let ((cont (car stack))
		      (stack2 (cdr stack))
		      (closure (create-closure node benv)))
			(cont-call cont (cons (create-lset closure) stack2) time)))
	       	    
	(define (begin-cont exps benv)
		(create-cont
			benv
			(lambda (stack time)
			    (let ((stack2 (cdr stack)))
				  (if (null? (cdr exps))
				      (eval-node (car exps) stack2 benv time)
				      (eval-node (car exps) (cons (begin-cont (cdr exps) benv) stack2) benv time))))))
	       	    
	(define (eval-begin node stack benv time)
		(let ((exps (begin-expressions node)))
	       	(if (null? exps)
		        (let ((cont (car stack))
		              (stack2 (cdr stack)))
		       	  (cont-call cont (cons (create-lset *unspecified*) stack2) time))
		       	(if (null? (cdr exps))
		       		(eval-node (car exps) stack benv time)
			    	(eval-node (car exps) (cons (begin-cont (cdr exps) benv) stack) benv time)))))
			
	(define (if-cont consequent alternate benv)
		(create-cont
			benv
			(lambda (stack time)
				(let ((values (car stack))
				      (stack2 (cdr stack)))
		        	(cond ((equal? values '(#f))
					       (eval-node alternate stack2 benv time))
					      ((and (pair? values) (not (member #f values)))
		   			       (eval-node consequent stack2 benv time))
						  (else
							(list (create-task
							        stack2
									benv
									(lambda ()
							   			(let ((time2 (time-tick (node-tag consequent) k time)))
											(eval-node consequent stack2 benv time2))))
								  (create-task
								    stack2
									benv
									(lambda ()
							   			(let ((time2 (time-tick (node-tag alternate) k time)))
											(eval-node alternate stack2 benv time2)))))))))))
		
	(define (eval-if node stack benv time)
		(eval-node (if-condition node) (cons (if-cont (if-consequent node) (if-alternate node) benv) stack) benv time)) 		
			    
    (define (operands-cont application operands benv)
    	(create-cont
    		benv
    		(lambda (stack time)
    			(if (null? operands)
    				(apply-proc application stack benv time)
    				(eval-node (car operands) (cons (operands-cont application (cdr operands) benv) stack) benv time)))))
			    
	(define (operator-cont application benv)
		(let ((operands (application-operands application)))
			(create-cont
				benv
				(lambda (stack time)
					(if (null? operands)
					    (apply-proc application stack benv time)
						(eval-node (car operands) (cons (operands-cont application (cdr operands) benv) stack) benv time)))))) 	    
			    
	(define (eval-application node stack benv time)
		(let ((operator (application-operator node)))
			(eval-node operator (cons (operator-cont node benv) stack) benv time)))
			
	(define (apply-proc application stack benv time)
		(let* ((application-length (+ (length (application-operands application)) 1))
	           (application-values (reverse (take stack application-length)))
	           (operator-values (car application-values))
	           (operands-values (cdr application-values))
	           (stack2 (list-tail stack application-length))
	           (cont (car stack2))
	           (marked-cont (cont-add-application application cont))
	           (stack3 (cdr stack2))
	           (time2 (time-tick (node-tag application) k time)))
			(map (lambda (operator)
					(create-task
						stack
						benv
						(lambda ()
							(let* ((calling-context (create-calling-context operator operands-values time))
								   (application-calling-contexts (lsetmap-get application calling-contexts)))
								(if (lset-member? calling-context application-calling-contexts)
									(cont-call marked-cont (cons *any* stack3) time2)
									(begin
										(set! calling-contexts (lsetmap-put application calling-context calling-contexts))
										(if (closure? operator)
											(apply-closure operator operands-values (cons marked-cont stack3) benv time2)
											(apply-primitive operator operands-values (cons marked-cont stack3) benv time2))))))))
						   operator-values)))
										
	(define (apply-primitive primitive operands-values stack benv time)
		(let ((cont (car stack))
		      (stack2 (cdr stack)))
			(if (member *any* operands-values)
				(cont-call cont (cons *any* stack2) time)
				(let ((values (map (lambda (operands)
										(apply primitive operands))
					 			   (perm operands-values))))
					(cont-call cont (cons (apply create-lset values) stack2) time)))))
			 
	(define (apply-closure closure operands-values stack benv time)
		(let* ((lam (closure-lambda closure))
		       (static-benv (closure-benv closure))
			   (extended-benv (benv-allocate-frame static-benv)))
			(let loop ((params (lambda-params lam))
			           (operands-values operands-values))
				(if (null? params)
					(eval-node (lambda-body lam) stack extended-benv time)
					(let* ((param (car params))
					       (address (create-var-address param time)))
					    (benv-add (var-name param) address extended-benv) 
						(set! store (store-alloc-aval address (car operands-values) store))
						(loop (cdr params)(cdr operands-values)))))))
		
	(define (eval-node node stack benv time)
		;(d 'eval-node node benv)
		;(d time stack)
		(set! store (store-gc stack benv tasks store))
		(cond ((literal? node) (eval-literal node stack benv time))
		      ((ref? node) (eval-ref node stack benv time))
		      ((application? node) (eval-application node stack benv time))
		      ((lambda? node) (eval-lambda node stack benv time))
		      ((define? node) (eval-define node stack benv time))
		      ((begin? node) (eval-begin node stack benv time))
		      ((if? node) (eval-if node stack benv time))
		      ((set? node) (eval-set node stack benv time))
		      (else
		        (error (String/format "cannot handle node %1s" (vector node))))))
		        
	(define (task-runner)
		(if (null? tasks)
			(create-ipda result reads writes store)
			(let ((task (car tasks)))
				(set! tasks (append (cdr tasks) (task-call task)))
				(task-runner))))

	(let* ((benv (benv-allocate-frame '()))
	       (time (create-time))
	       (stack (list (create-cont
						 benv
						 (lambda (stack time)
                          (set! result (values-union result (car stack)))
                          '())))))
		(set! tasks (list (create-task
							stack
							benv
					        (lambda ()
		                   	  (eval-node node stack benv time)))))
		(task-runner)))				                   					


(define (ipda-application-writes application ipda)
	(let ((entry (assoc application (ipda-writes ipda))))
		(if entry
			(cdr entry)
			'())))
			
(define (ipda-application-reads application ipda)
	(let ((entry (assoc application (ipda-reads ipda))))
		(if entry
			(cdr entry)
			'())))
		 
(define (ipda-var-written-by var ipda)
	(let loop ((writes (ipda-writes ipda))
			   (result '()))
	  (if (null? writes)
	      result
	      (let ((entry (car writes)))
	      	(let ((vars (map var-address-var (cdr entry))))
	      		(if (member var vars)
	      			(loop (cdr writes) (cons (car entry) result))
	      			(loop (cdr writes) result)))))))
	
(define (ipda-var-read-by var ipda)
	(let loop ((reads (ipda-reads ipda))
			   (result '()))
	  (if (null? reads)
	      result
	      (let ((entry (car reads)))
	      	(let ((vars (map var-address-var (cdr entry))))
	      		(if (member var vars)
	      			(loop (cdr reads) (cons (car entry) result))
	      			(loop (cdr reads) result)))))))

(define (ipda-written-vars n ipda)
	(let ipda-written-vars ((n n))
		(let ((cs (filter (not%1 lambda?) (children n))))
			(append (if (application? n) (ipda-application-writes n ipda) '())
					(apply append (map ipda-written-vars cs))))))

(define (ipda-read-vars n ipda)
	(let ipda-read-vars ((n n))
		(let ((cs (filter (not%1 lambda?) (children n))))
			(append (if (application? n) (ipda-application-reads n ipda) '())
					(apply append (map ipda-read-vars cs))))))
		        
;(define ast (create-ast '(begin 1 2 3)))
;(define ast (create-ast '(begin (define a 1) (set! a 2) a)))
;(define ast (create-ast '(begin (define pi (lambda () 3)) (pi) (pi))))
;(define ast (create-ast '(begin (define sq (lambda (n) (* n n))) (sq 5) (sq 6))))
;(define ast (create-ast '(begin (define lister (lambda (g) (lambda (x) (+ g x)))) ((lister 1) 2))))
;(define ast (create-ast '(begin (define z #f) (define writez (lambda () (set! z 123))) (define readz (lambda () z)) (cons (writez) (readz)))))
;(define ast (create-ast '(if (zero? 0) (if (zero? 1) 'treu1  'feulse1) 'feulse)))
;(define ast (create-ast '(begin (define count (lambda (n) (if (zero? n) 'done (count (- n 1))))) (count 2000))))
;(define ast (create-ast '(begin (define t (lambda (x) (t (+ x 1)))) (t 0))))
;(define ast (create-ast '(begin (define fib (lambda (n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) (fib 3))))
;(define ast (create-ast '(begin (define appender (lambda (h a b) (append (h a) (h b)))) (define lister (lambda (g) (lambda (x) (list (g x))))) (define square (lambda (x) (* x x))) (appender (lister square) 42 43))))
(define ast (create-ast '(begin (define z '()) (define appender (lambda (h a b) (append (h a) (h b)))) (define lister (lambda (g) (lambda (x) (list (g x))))) (define conser (lambda (x) (set! z (cons x z)) z)) (appender (lister conser) 42 43))))
;(define ast (create-ast '(begin (define sq (lambda (n) (* n n))) (sq 5))))


(define ipda (ipda-eval ast 4 ast))
(d 'result (ipda-result ipda))
(d 'reads (ipda-reads ipda))
(d 'rl (length (ipda-reads ipda)))
(d 'writes (ipda-writes ipda))

	