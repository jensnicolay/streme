;
; Slip: Lisp in 85 lines - Theo D'Hondt:PROG:VUB - January 2009
;

(begin
  (define circularity-level (+ circularity-level 1))
  (define meta-level-eval eval)
  (define eval '())

  (define (loop output environment)
    (define rollback environment)

    (define (evaluate expression)

      (define (error message qualifier)
        (display message)
        (loop qualifier rollback))

      (define (bind-variable variable value)
        (define binding (cons variable value))
        (set! environment (cons binding environment)))

      (define (bind-parameters parameters arguments)
        (if (symbol? parameters)
          (bind-variable parameters arguments)
          (if (pair? parameters)
            (begin 
              (define variable (car parameters))
              (define value (car arguments ))
              (bind-variable variable value)
              (bind-parameters (cdr parameters) (cdr arguments))))))

      (define (evaluate-sequence expressions)
        (define head (car expressions))
        (define tail (cdr expressions))
        (define value (evaluate head))
        (if (null? tail)
           value
           (evaluate-sequence tail)))

      (define (build-closure parameters expressions)
        (define lexical-environment environment)
        (lambda arguments
          (define dynamic-environment environment)
          (set! environment lexical-environment)
          (bind-parameters parameters arguments)
          (define value (evaluate-sequence expressions))
          (set! environment dynamic-environment)
          value))

      (define (evaluate-application operator)
        (lambda operands
          (apply (evaluate operator) (map evaluate operands))))

      (define (evaluate-begin . expressions)
        (evaluate-sequence expressions))

      (define (evaluate-define pattern . expressions)
        (if (symbol? pattern)
          (begin
            (define value (evaluate (car expressions)))
            (define binding (cons pattern value))
            (set! environment (cons binding environment))
            value)
          (begin
            (define binding (cons (car pattern) ()))
            (set! environment (cons binding environment))
            (define closure (build-closure (cdr pattern) expressions))
            (set-cdr! binding closure)
            closure)))

      (define (evaluate-if predicate consequent . alternate)
        (if (evaluate predicate) 
          (evaluate consequent)
          (if (null? alternate)
            ()
            (evaluate (car alternate)))))

      (define (evaluate-lambda parameters . expressions)
        (build-closure parameters expressions))

      (define (evaluate-quote expression)
        expression)

      (define (evaluate-set! variable expression)
        (define value (evaluate expression))
        (define binding (assoc variable environment))
        (if binding
           (set-cdr! binding value)
           (error "inaccessible variable: " variable)))

      (define (evaluate-variable variable)
        (define binding (assoc variable environment))
          (if binding
            (cdr binding)
            (meta-level-eval variable)))

      (if (symbol? expression)
        (evaluate-variable expression)
        (if (pair? expression)
          (begin
            (define operator (car expression))
            (define operands (cdr expression))
            (apply
              (if (eq? operator 'begin) evaluate-begin
                (if (eq? operator 'define) evaluate-define
                  (if (eq? operator 'if) evaluate-if
                    (if (eq? operator 'lambda) evaluate-lambda
                      (if (eq? operator 'quote) evaluate-quote
                        (if (eq? operator 'set!) evaluate-set!
                          (evaluate-application operator))))))) operands))
        expression)))

    (display output)
    (newline)
    (display "level ")
    (display circularity-level)
    (display ">")
    (set! eval evaluate)
    (loop (evaluate (read)) environment))

  (loop "Meta-Circular Slip" ()))