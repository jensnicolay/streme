(load "lang/java.str")

(define dir-left 37)
(define dir-up 38)
(define dir-right 39)
(define dir-down 40)

(define (dir-inverse dir)
  (cond ((= dir dir-up) dir-down)
        ((= dir dir-down) dir-up)
        ((= dir dir-left) dir-right)
        ((= dir dir-right) dir-left)))

(define (xy x y) (cons x y))
(define (xy-x p) (car p))
(define (xy-y p) (cdr p))
(define (xy-in-range? p x1 y1 x2 y2)
  (let ((x (xy-x p))
        (y (xy-y p)))
    (and (>= x 1) (>= y y1) (<= x x2) (<= y y2))))
(define (xy-move p dir)
  (let
      ((x (xy-x p))
       (y (xy-y p)))
    (cond ((= dir dir-up) (xy x (- y 1)))
          ((= dir dir-down) (xy x (+ y 1)))
          ((= dir dir-left) (xy (- x 1) y))
          ((= dir dir-right) (xy (+ x 1) y)))))

(define (snake p segs) (cons p segs))
(define (snake-xy s) (car s))
(define (snake-segs s) (cdr s))
(define (snake-add s dir)
  (let ((p (snake-xy s))
        (segs (snake-segs s)))
    (let ((newP (xy-move p dir))
          (newSegs (cons dir segs)))
      (snake newP newSegs))))
(define (snake-move s dir)
  (let ((p (snake-xy s))
        (segs (snake-segs s)))
    (let ((newP (xy-move p dir))
          (newSegs (cons dir (reverse (cdr (reverse segs))))))
      (snake newP newSegs))))
(define (snake-xys s)
  (letrec ((snake-xys-helper (lambda (p dirs xys)
                               (if (null? dirs)
                                   (reverse xys)
                                   (let* ((dir (car dirs))
                                          (newP (xy-move p (dir-inverse dir))))
                                     (snake-xys-helper newP (cdr dirs) (cons newP xys)))))))
    (let ((p (snake-xy s)))
      (snake-xys-helper p (snake-segs s) (list p)))))
                                   
(define (snake-on-snake? s p)
  (let ((xys (snake-xys s)))
    (member p xys)))

(define (board n running s score)
  (vector n running s score))

(define (board-size b) (vector-ref b 0))
(define (board-running? b) (vector-ref b 1))
(define (board-snake b) (vector-ref b 2))
(define (board-score b) (vector-ref b 3))
(define (board-step b dir)
  (if (not (board-running? b))
      b
      (let
          ((score (board-score b)))
        (let* ((s (board-snake b))
               (p (snake-xy s))
               (newP (xy-move p dir)))
          (if (and (board-in-range? b newP) (not (snake-on-snake? s newP)))
              (let
                  ((newS (snake-move s dir))
                   (newScore (+ score 1)))
                (board (board-size b) #t newS newScore))
              (board (board-size b) #f s score))))))  
(define (board-in-range? b p)
  (let ((n (board-size b)))
    (xy-in-range? p 0 0 (- n 1) (- n 1))))

;;;;;

(define (setup-board n)
  (let
      ((snake (snake (xy (- (quotient n 2) 4) (quotient n 2)) (list dir-right))))
    (board n #t (snake-add (snake-add (snake-add (snake-add snake dir-right) dir-right) dir-right) dir-right) 0)))

;;;;;

(define (snake-game n)
	(let ((b (setup-board n))
		  (dir dir-right)
		  (mag 20)
		  (frame (javax.swing.JFrame. "Snake!")))
	  (.setSize frame (* n mag) (+ (* n mag) 24))
	  (let ((panel (extend (javax.swing.JPanel. #t)
			  (paintComponent (lambda (g) 
					  (.paintComponent super g)
					  (.drawRect g 0 0 (* n mag) (* n mag))
					  (let* ((s (board-snake b))
							 (xys (snake-xys s))
							 (xys0 (car xys)))
						(.fillRect g (* (xy-x xys0) mag) (* (xy-y xys0) mag) mag mag)
						(let loop ((xyss (cdr xys)))
						  (if (not (null? xyss))
							  (let ((xy (car xyss)))
							    (.drawRect g (* (xy-x xy) mag) (* (xy-y xy) mag) mag mag)
							    (loop (cdr xyss)))))
						;(.setColor g java.awt.Color/RED)
						(if (not (board-running? b))
							(begin 
							  (.setBackgoundColor frame java.awt.Color/LIGHT_GRAY)
							  (.setTitle frame (string-append "Game over! (score: " (board-score b) + ")")))
							(.setTitle frame (string-append "Snake! (score: " (board-score b) + ")")))))))))
		(.addPanel (.getContentPane frame) panel)
		(.addKeyListener (extend (.java.awt.event.KeyAdapter)
				           (keyPressed (lambda (e)
				        		         (set! dir (.getKeyCode e))))))
		(.setVisible frame #t)
		
